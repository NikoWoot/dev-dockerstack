    # ========================================
    # Mapping URI to Utils.graphics.image-preset-displayer
    # ========================================
    map $uri $redirect_uri {
        ~^(\/src\/public\/image\/example\/)(.*)$ /vendor/mouf/utils.graphics.image-preset-displayer/src/direct/displayImage.php?instance=exampleInstance&url=$3;
    }

server {
        listen 80 default_server;
     
        server_name localhost;

        root /var/www/html;

        # ========================================
        # REDIRECT TO GREAT DOMAIN
        # ========================================
        # Redirect to
        #if ($http_host != "localhost") {
        #    return 301 http://localhost$request_uri;
        #}

        # ========================================
        # FOR DOCKER LOGS
        # ========================================
        access_log /dev/stdout;
        error_log /dev/stderr;
        # ========================================
        # FOR OTHERS LOGS
        # ========================================
        #access_log /var/log/nginx/localhost-access.log;
        #error_log /var/log/nginx/localhost-error.log;
        # Rewrite log is active only in notice (debug_level)
        #rewrite_log on;

        # ========================================
        # Variables for Mouf rewriting
        # ========================================
        # Use for choose good URL Rewriting
        set $moufRedirection 0;
        set $base /;

        # First attempt to serve request as file, then as directory, then fall back to Mouf
        location / {

            # If start with /vendor/mouf/mouf we'll just send it to Mouf-Router
            if ($uri ~ ^(.*)(\/vendor\/mouf\/mouf)(.*)$) {
                set $base $2;
                rewrite ^(.*)$ /vendor/mouf/mouf/src/mouf_router.php last;
                set $moufRedirection 1;
            }
            
            # If nothing matches we'll just send it to Splash-MVC
            if ($moufRedirection = 0) {
                rewrite ^(.*)$ /vendor/mouf/mvc.splash/src/splash.php last;
                set $moufRedirection 2;
            }

            # Try to serve file directly, fallback to splash
            try_files $uri $uri/ =404;
        }

        # Pass to MVC.Splash by PHP-FPM
        location ~* ^(\/vendor\/mouf\/mvc.splash\/src\/splash\.php)  {
                
            try_files $uri = 404;

            fastcgi_intercept_errors on;

            fastcgi_split_path_info ^(.+\.php)(/.*)$;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param REDIRECT_URL $request_uri;
            fastcgi_param REDIRECT_BASE $request_uri; 
            #fastcgi_param BASE $base; # Do not activate, create a bug (// in url)

            fastcgi_pass unix:/var/run/php5-fpm.sock;
            internal;
        }

        # Pass to Mouf-router by PHP-FPM
        location ~* ^(\/vendor\/mouf\/mouf\/src\/mouf_router\.php)  {
                
            try_files $uri = 404;

            fastcgi_intercept_errors on;

            fastcgi_split_path_info ^(.+\.php)(/.*)$;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param REDIRECT_URL $request_uri;
            fastcgi_param REDIRECT_BASE $request_uri; 
            fastcgi_param BASE $base;

            fastcgi_pass unix:/var/run/php5-fpm.sock;
            internal;
        }

        # Pass to Utils.graphics.image-preset-displayer by PHP-FPM
        location ~* ^(\/vendor\/mouf\/utils.graphics.image-preset-displayer\/src\/direct\/displayImage\.php)  {
            
            try_files $uri = 404;

            fastcgi_intercept_errors on;

            fastcgi_split_path_info ^(.+\.php)(/.*)$;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param REDIRECT_URL $request_uri;
            fastcgi_param REDIRECT_BASE $request_uri; 
            fastcgi_param BASE $base;

            fastcgi_pass unix:/var/run/php5-fpm.sock;

            # Some basic cache-control for static files to be sent to the browser
            expires max;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";

            internal;
        }

        # Pass classical php files to PHP-FPM
        location ~ \.php(/|$) {
                
            try_files $uri = 404;

            fastcgi_intercept_errors on;

            fastcgi_split_path_info ^(.+\.php)(/.*)$;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param REQUEST_URI $request_uri;
            fastcgi_param REDIRECT_URL $request_uri; 
            fastcgi_param BASE $base;

            fastcgi_pass unix:/var/run/php5-fpm.sock;
        }

        # H5BP Configuration (https://github.com/h5bp/server-configs-nginx/blob/master/h5bp/location/cache-busting.conf)
        # This will route all requests for /css/style.20120716.css to /css/style.css  
        location ~* \.(?:ico|css|js|gif|jpe?g|png|ttf|woff|svg|pdf|swf)$ {
            
            # $redirect_uri Used for Utils.graphics.image-preset-displayer rewrite rules.
            try_files $uri $1.$2 $redirect_uri;

            # Some basic cache-control for static files to be sent to the browser
            expires max;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        }

        # Remove the robots line if you want to use wordpress' virtual robots.txt
        location = /robots.txt  { access_log off; log_not_found off; }
        location = /favicon.ico { access_log off; log_not_found off; }  
    
        # Prevents hidden files (beginning with a period) from being served
        location ~ /\.          { access_log off; log_not_found off; deny all; }
        location ~ ~$           { access_log off; log_not_found off; deny all; }
}